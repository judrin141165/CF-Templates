---

Description: >-
    This Stack Create three  EC2 instances and DB Instance
    and EC2 launch template with user data and two security Groups

    one EC2 is created with launchtemplate another EC2 have metadata data and third EC2
    instance is standard instance


    In the future one  of the EC2 instances will be  configured as Ansible master for automation



Parameters:

  VPCId:
    Description: VPC-ID of your existing VPC
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be existing VPC
  PublicSUbnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public Subnet
    ConstraintDescription: Must be existing Subnet


#########################################################
#EC2 Instances
###########################################################






  NameOfService:
    Description: The tag name associated with this stack.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 Instance type
    Type: String
    Default: t2.micro

  DBClass:

      Description: Database instance class
      Type: String
      Default: db.t2.small

  DBName:
      Default: wordpressdb
      Description: The WordPress database name
      Type: String
      MinLength: '1'
      MaxLength: '64'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
      NoEcho: 'true'
      Description: The WordPress database admin account username
      Type: String
      MinLength: '1'
      MaxLength: '16'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
          NoEcho: 'true'
          Description: The WordPress database admin account password
          Type: String
          MinLength: '8'
          MaxLength: '41'
          AllowedPattern: '[a-zA-Z0-9]*'
          ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
            Default: 'false'
            Description: Create a Multi-AZ MySQL Amazon RDS database instance
            Type: String
            AllowedValues:
              - 'true'
              - 'false'
            ConstraintDescription: must be either true or false.
  DBAllocatedStorage:
              Default: '5'
              Description: The size of the database (Gb)
              Type: Number
              MinValue: '5'
              MaxValue: '1024'
              ConstraintDescription: must be between 5 and 1024Gb.
  ExistingSecurityGroup:
    Description: An existing security group ID (optional).
    Default: NONE
    Type: String
    AllowedValues:
      - default
      - NONE
Conditions:
    CreateNewSecurityGroup: !Equals [!Ref ExistingSecurityGroup, NONE]


Mappings:
  RegionMap:
    us-east-2:
      "HVM64": "ami-08b6f2a5c291246a0"

Resources:

  MYLaunchtemplate:
    Type: AWS::EC2::LaunchTemplate

    Properties:
      LaunchTemplateName: "MYLaunchtemplate"
      LaunchTemplateData:

        ImageId: "ami-08b6f2a5c291246a0"

        InstanceType: !Ref InstanceType

        KeyName: !Ref KeyName

        Monitoring:
          Enabled: true




        UserData: !Base64
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - |
                yum update -y aws-cfn-bootstrap
              - '/opt/aws/bin/cfn-init -v '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource LaunchConfig '
              - '         --configsets wordpress_install '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

              - '/opt/aws/bin/cfn-signal -e $? '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource WebServerGroup '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+








  LnEc2InstanceWebServer1:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
          install_cfn:
            files:
              /etc/cfn/cfn-hup.conf:
                content: !Join
                  - ''
                  - - |
                      [main]
                    - stack=
                    - !Ref 'AWS::StackId'
                    - |+

                    - region=
                    - !Ref 'AWS::Region'
                    - |+

                mode: '000400'
                owner: root
                group: root
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Join
                  - ''
                  - - |
                      [cfn-auto-reloader-hook]
                    - |
                      triggers=post.update
                    - >
                      path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                    - 'action=/opt/aws/bin/cfn-init -v '
                    - '         --stack '
                    - !Ref 'AWS::StackName'
                    - '         --resource LaunchConfig '
                    - '         --configsets wordpress_install '
                    - '         --region '
                    - !Ref 'AWS::Region'
                    - |+

                mode: '000400'
                owner: root
                group: root
            services:
              sysvinit:
                cfn-hup:
                  enabled: 'true'
                  ensureRunning: 'true'
                  files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          install_wordpress:
            packages:
              yum:
                php73: [ ]
                php73-mysqlnd: [ ]
                mysql57: [ ]
                httpd24: [ ]
            sources:
              /var/www/html: 'http://wordpress.org/latest.tar.gz'
            files:
              /tmp/create-wp-config:
                content: !Join
                  - ''
                  - - |
                      #!/bin/bash
                    - >
                      cp /var/www/html/wordpress/wp-config-sample.php
                      /var/www/html/wordpress/wp-config.php
                    - sed -i "s/'database_name_here'/'
                    - !Ref DBName
                    - |
                      '/g" wp-config.php
                    - sed -i "s/'username_here'/'
                    - !Ref DBUser
                    - |
                      '/g" wp-config.php
                    - sed -i "s/'password_here'/'
                    - !Ref DBPassword
                    - |
                      '/g" wp-config.php
                    - sed -i "s/'localhost'/'
                    - !GetAtt
                      - DBInstance
                      - Endpoint.Address
                    - |
                      '/g" wp-config.php
                mode: '000500'
                owner: root
                group: root
            commands:
              01_configure_wordpress:
                command: /tmp/create-wp-config
                cwd: /var/www/html/wordpress
            services:
              sysvinit:
                httpd:
                  enabled: 'true'
                  ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap [RegionMap,!Ref AWS::Region,HVM64]

      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref NameOfService, 'webserver-1' ,] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroup

      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType




  LnEc2InstanceWebServer2:
    Type: AWS::EC2::Instance
    Properties:

      ImageId: !FindInMap [RegionMap,!Ref AWS::Region,HVM64]



      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref NameOfService, 'webserver' ,'2'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroup


      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType

  LnEc2InstanceWebServer3:
    Type: AWS::EC2::Instance
    Properties:

      ImageId: !FindInMap [RegionMap,!Ref AWS::Region,HVM64]



      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref NameOfService, 'webserver' ,'3'] ]
      SecurityGroupIds:
        - !Ref LnSecurityGroup


      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType


      LaunchTemplate:
        LaunchTemplateName: "MYLaunchtemplate"
        Version: "1"
    DependsOn: MYLaunchtemplate

  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref LnSecurityGroup
      VpcId: !Ref VPCId
  DBInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBName: !Ref DBName
        Engine: MySQL
        MultiAZ: !Ref MultiAZDatabase
        MasterUsername: !Ref DBUser
        MasterUserPassword: !Ref DBPassword
        DBInstanceClass: !Ref DBClass
        AllocatedStorage: !Ref DBAllocatedStorage
        VPCSecurityGroups:
          - !GetAtt
            - DBEC2SecurityGroup
            - GroupId












  LnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to client host. Created using CloudFormation template
      VpcId: !Ref VPCId

      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3005
        ToPort: 3005
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ansible-core-keypair
        - Key: Description

          Value: Security Group created for SSH and HTTP access to instances.
  LnElasticIp1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LnEc2InstanceWebServer1
  LnElasticIp2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LnEc2InstanceWebServer2
  LnElasticIp3:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref LnEc2InstanceWebServer3


  
Outputs:
  LnPublicIpAddressInstance1:
    Description: The Public IP address for EC2 instances
    Value: !GetAtt
      - LnEc2InstanceWebServer1
      - PublicIp


  LnPublicIpAddressInstance2:
    Description: The Public IP address for EC2 instances
    Value: !GetAtt
      - LnEc2InstanceWebServer2
      - PublicIp
  LnPublicIpAddressInstance3:
    Description: The Public IP address for EC2 instances
    Value: !GetAtt
      - LnEc2InstanceWebServer3
      - PublicIp


  LnSecurityGroupID:
    Description: Name of the security Group
    Value: !If [CreateNewSecurityGroup,!Ref LnSecurityGroup,!Ref ExistingSecurityGroup]







